[["index.html", "GVSU CIS 331 - Data analysis tools and techniques (Winter 2023) Chapter 1 Introduction", " GVSU CIS 331 - Data analysis tools and techniques (Winter 2023) Instructor: Dr. Alexander Lalejini 2023-01-21 Chapter 1 Introduction This website contains some of the course materials for Winter 2023 CIS 331 at Grand Valley State University. "],["week-01---overview.html", "Chapter 2 Week 01 - Overview", " Chapter 2 Week 01 - Overview Topics: Course introduction Introduction to data, data science, data analysis lifecycle Overview of data mining techniques "],["homework-1.html", "Chapter 3 Homework 1 3.1 Overview 3.2 Part A. Syllabus 3.3 Part B. About me 3.4 Part C. Group survey 3.5 Part D. Data", " Chapter 3 Homework 1 3.1 Overview This assignment is to be completed individually. I will use your responses to help assign partners. 3.1.1 Grading Uploaded requested files, 5% File is properly/clearly formatted, 5% Proper section headers for each part of your homework. You clearly indicate which question each of your responses are associated with. Part A. 10% Part B. 20% Part C. 10% Part D. 50% 3.1.2 Deliverables .pdf file with your responses 3.1.3 Formatting In the document that you turn in for this homework, include a heading for each Part. Ensure that you clearly indicate which question each of your responses are associated with. 3.2 Part A. Syllabus Read the course syllabus (posted on blackboard). For this question (on the document that you turn in), confirm that you have read the syllabus. Read the academic honesty policy for the GVSU School of Computing: https://www.gvsu.edu/computing/academic-honesty-30.htm. For this question (on the document that you turn in), confirm that you have read and agree to abide by the academic honesty policy. 3.3 Part B. About me There are no right or wrong answers here. For full credit, respond with complete sentences (2 - 3 is probably all you need). Why are you taking this class and what do you hope to get out of the class? Think about your major and/or career goals. What kinds of data would it be useful to be comfortable analyzing? What kinds of insights would you want to gain from the data? 3.4 Part C. Group survey For all homework assignments after the first two, you will have the option to work with a partner. I strongly recommend that you work with a partner. However, if you would still prefer to work alone for the semester, that is fine. Do not worry if you don’t know anyone else in the class, I will take care of group assignment. See the syllabus for group policy. Your responses to these questions will help me to assign partners. Would you like to work individually or with a partner? If you would like to be assigned a partner, is there anyone in the class that you would like to be in a group with? (the request should be mutual to guarantee that I match you) If you would like to be assigned a partner, is there anyone in the class that you would not like to be in a group with? If you would like to be assigned a partner, would you be okay with a third group member if there are an odd number of individuals who want to work with a partner? What grade do you expect to earn in this course? Do you have any prior programming experience? If so, what programming languages do you have prior experience with? What data analysis software (if any) do you have experience with? What do you consider to be your strengths? E.g., coding, writing, searching/reading reference material, organization, etc. Are you able to bring a computer to class to work on in-class activities using data analysis software? 3.5 Part D. Data For this part of your homework, identify a source of “big data” that you find interesting. What source of big data did you choose and why? Imagine you have a dataset from the source you identified. What do the objects in your dataset represent? Describe at two attributes that each object in the dataset would have. "],["week-02---overview.html", "Chapter 4 Week 02 - Overview", " Chapter 4 Week 02 - Overview Topics: Introduction to the R programming language R programming basics R data structures Loading data from file into R "],["homework-2.html", "Chapter 5 Homework 2 5.1 Overview 5.2 Part A. Install R and RStudio 5.3 Part B.", " Chapter 5 Homework 2 5.1 Overview This assignment is to be completed individually. 5.1.1 Objectives Demonstrate R and RStudio installation Demonstrate R package installation Write a function in R 5.1.2 Grading Uploaded requested files, 5% File is properly/clearly formatted, 5% Proper section headers for each part of your homework. You clearly indicate which question each of your responses are associated with. Part A: 60% Part B: 30% 5.1.3 Deliverables .pdf file with your responses 5.1.4 Formatting In the document that you turn in for this homework, include a heading for each Part. Ensure that you clearly indicate which question each of your responses are associated with. 5.2 Part A. Install R and RStudio 5.2.1 1. Install R For this course, you’ll need access to a computer with R installed. To install R, navigate to https://cran.r-project.org/, select the appropriate operating system, and follow the instructions to download and install the most recent version of R (should be version 4.2 or higher). If you’re having trouble, try reading the installation guide here: https://rstudio-education.github.io/hopr/starting.html If you’re still having trouble getting R installed on your machine, talk to me during office hours or send me an email! For credit on this question, take a screenshot of you running R on your computer (either in a terminal or by running the “R” application, which brings up an R console). 5.2.2 2. Install RStudio RStudio is a free, feature-rich IDE for writing R code. I am not going to require that you to use RStudio for the rest of this class, but I strongly recommend that you do use RStudio if you are new to programming in R. You can download and install RStudio (the free version) here: https://posit.co/downloads/ For credit on this question, take a screenshot of you running RStudio on your computer. 5.2.3 3. Installing packages Throughout the semester you will need to be able to install R packages that are not pre-loaded into your R installation. For example, we’ll use the tidyverse collection of packages for many common data wrangling tasks. The tidyverse packages do not come with the default installation of R, so we will need to install them. To install the complete tidyverse collection of packages, you can run the following command in your R console in RStudio. install.packages(&quot;tidyverse&quot;) Alternatively, you can install packages through the RStudio menus: Tools &gt; Install Packages. You would type tidyverse in the Packages textbox and click install. For credit on this question, take a screenshot of you running (it must be clear that you successfully installed the package): library(tidyverse) If you have trouble, come talk to me after class / during office hours! 5.3 Part B. Read Chapter 2 of “Hands-On Programming with R”: https://rstudio-education.github.io/hopr/basics.html This chapter introduces much of what we have covered in class (though there are a few things you may not have seen yet). As you read, follow along in RStudio. 5.3.1 4. R basics By the end of the chapter, you should be able to write a function that rolls a six-sided die and returns the result. Modify the function that rolls a six-sided die to instead roll a 20-sided die. Include a screenshot of your code and a screenshot of you running your function. "],["week-03---overview.html", "Chapter 6 Week 03 - Overview", " Chapter 6 Week 03 - Overview R bootcamp continued! Topics for this week: R markdown Data wrangling with tidyverse tools dplyr tidy data and the tidyr package "],["getting-started-with-r-markdown.html", "Chapter 7 Getting Started with R Markdown 7.1 Dependencies 7.2 Create a new R Markdown document in RStudio 7.3 Anatomy of an R Markdown document 7.4 “Knitting” 7.5 Resources", " Chapter 7 Getting Started with R Markdown R markdown documents are a way to interweave markdown with R. This enables us to write nicely formatted documents with R code (and output from your R code) embedded directly in the document. Find examples of compiled R markdown documents here: https://rmarkdown.rstudio.com/gallery.html In fact, this page is generated with R Markdown! Source code for this page here. 7.1 Dependencies To use R markdown, you’ll need to install the following packages: markdown and rmarkdown. You should also want to go ahead and install the tinytex package (+ install TinyTex) to be able generate PDF output from your R Markdown documents. See the instructions below! 7.1.1 Installing R packages As previously mentioned, there are many R packages (&gt; 18,000!) with all sorts of useful functionality. To install an R package, use the install.packages function in your R console (e.g., in RStudio). Run ?install.packages in your R console to read its help page. To install the markdown and rmarkdown packages, run the following command in your R console: install.packages(c(&quot;markdown&quot;, &quot;rmarkdown&quot;)) Once the installations finish, you should be able to run the following two commands without errors: library(markdown) library(rmarkdown) For this class, you’ll also need to be able to generate PDF output from your R Markdown documents. To do so, you’ll need to install LaTex (if you’re not sure what that is, no worries!). Run the following two commands in your R console in RStudio: install.packages(&#39;tinytex&#39;) tinytex::install_tinytex() 7.2 Create a new R Markdown document in RStudio Click the new file button in the top right of the RStudio window, and select R Markdown. In RStudio, you should get a pop-up for creating a new r markdown document. For now, there are two relevant options: Click the “Create Empty Document” in the bottom left of the popup. This will create an empty R markdown file for you. Fill out the title, author (you!), and date fields and press “Okay”. This will create a new R markdown file, but RStudio will initialize your file with a bunch of stuff (this stuff is helpful information, but you will want to delete it all for any assignments in this class). 7.3 Anatomy of an R Markdown document There are three basic components in an R Markdown document: the metadata, text, and code. Here’s the contents for a minimal R Markdown document (from https://bookdown.org/yihui/rmarkdown/basics.html): An R Markdown document should be a plain text file (i.e., don’t try to write one in google docs or microsoft word!) and conventionally has the .Rmd file extension. 7.3.1 Frontmatter (metadata) The metadata (or the frontmatter) specifies how your R Markdown should be compiled. E.g., the output file type, whether to include a table of contents, etc. The metadata should be written between a pair of three dashes --- at the top of your document (see minimal example). For now, don’t worry too much about what you should include in your document metadata. For the most part, you can just use what RStudio includes in your document. 7.3.2 Text The body of your document follows the metadata. Any text (i.e., everything that isn’t code) you include in your document should follow markdown syntax. If you’re not already familiar with markdown, read over this: https://www.markdownguide.org/getting-started. For basic markdown syntax, see: https://www.markdownguide.org/basic-syntax/. Being familiar with basic syntax should be just about everything you need for your homework assignments in this class. For more advanced markdown syntax, see: https://www.markdownguide.org/extended-syntax/. You can also refer to Section 2.5 in R Markdown: The Definitive Guide for more info on markdown. 7.3.3 Code In general, you can include code in your R Markdown documents in two ways: Inline code begin with `r and end with a `. E.g., 2 would render the result of log(4, base=2) inline. You can include a “code chunk” inside your R Markdown document. A code chunk begins with three backticks ```{r} and end with three backticks (see minimal example above for an example). There are many options tha tyou can specify in the {} at the beginning of a code chunk. See https://yihui.org/knitr/options/ for details. 7.4 “Knitting” To compile an R Markdown document into a PDF or HTML file, you need to “Knit” it. In RStudio, this is pretty straightforward. Just click the “Knit” button on your document in RStudio. 7.5 Resources R Markdown: The Definitive Guide Code chunk options: https://yihui.org/knitr/options/ "],["in-class-activity-using-dplyr-to-manipulate-data.html", "Chapter 8 In-class activity: using dplyr to manipulate data 8.1 Goals: 8.2 Sources: 8.3 Setup 8.4 Overview 8.5 The pipe operator 8.6 Data 8.7 Filter rows with filter() 8.8 Arrange rows with arrange() 8.9 Choose rows using their position with slice() 8.10 Select columns with select() 8.11 Rename columns with rename() 8.12 Add new columns with mutate() 8.13 Summarize groups of rows using summarise()", " Chapter 8 In-class activity: using dplyr to manipulate data These activities are an opportunity to practice using dplyr functions to wrangle data. 8.1 Goals: Learn about solving common data manipulation challenges with dplyr Learn to use the pipe operator (%&gt;%) 8.2 Sources: For more information/documentation on data wrangling with dplyr, I recommend these resources: Introduction to dplyr R for Data Science dplyr documentation Software carpentry lesson on dplyr 8.2.1 dplyr cheat sheet Download pdf here: https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf 8.3 Setup You might have already installed the tidyverse collection of packages, which includes the dplyr package. But, if you haven’t, go ahead and run: install.packages(&quot;tidyverse&quot;) With the tidyverse packages installed, you’ll need to load the dplyr library to use it. You can load the dplyr package individually using library(dplyr). Alternatively, you can load all tidyverse packages: library(tidyverse) ## ── Attaching packages ──────────────────────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.10 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.1 ## ✔ readr 2.1.2 ✔ forcats 0.5.2 ## ── Conflicts ─────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() 8.4 Overview This document will cover key dplyr functions that solve the most common data manipulation challenges. The examples and explanations here non-exhaustive (dplyr has a lot of functionality and each of these functions are very flexible). Instead, I’d like you to start building a sense of the broad category of data manipulations that are possible with each of the dplyr functions below. As you encounter challenges with manipulating data, you should have a solid idea of which functions you will need to do what you want to do. Then, you can refer to the appropriate documentation to work out the specific details. dplyr’s functions for basic data manipulation can be divided into three categories based on the component of the dataset that they work with (descriptions pulled from dplyr documentation): Rows filter() - choose rows in your data based on their column values slice() - choose rows in your data based on their location (index) in the dataset arrange() - change the ordering of rows in your data Columns select() - changes whether or not a column is included rename() - changes the names of columns mutate() - changes the values of columns and can create new columns that are functions of existing columns relocate() - changes the order of columns Groups of rows summarise() - collapses a group of rows into a single row These functions can be used in combination with group_by(), which allows you to perform these functions on particular groups of rows, instead of the entire dataset. Note that the above list of functions is non-exhaustive. I refer you to the dplyr documentation for an exhaustive list. Additionally, I’d encourage you to look over (and save) the cheat sheet linked at the end of this document. 8.5 The pipe operator Most dplyr functions take a dataframe (or tibble) as their first argument. dplyr provides the pipe operator (%&gt;%), which lets you conveniently compose multiple dplyr functions in a single line (instead of needing to save intermediate states of your dataset). The pipe operator “pipes” the results of the left side of the pipe into the first argument of the right side of the pipe. f &lt;- function(a, b) { return(a + b) } g &lt;- function(a, b) { return(a * b) } x &lt;- 2 y &lt;- 100 Challenge problem: In the code chunk below, use the pipe operator to call the f with x and y as arguments. # Your code here Challenge problem: In the code chunk below, chain together two pipe operators to call g(f(x, y), y) # Your code here 8.6 Data We’ll use the starwars dataset to demonstrate the basic data manipulation functions provided by dplyr. You don’t need to download anything, the starwars dataset is loaded when you load the dplyr package. dim(starwars) ## [1] 87 14 This dataset has 87 rows and 14 columns where each row represents a character from Star Wars, and each column is a particular attribute. starwars ## # A tibble: 87 × 14 ## name height mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex gender homew…⁵ ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Skywa… 172 77 blond fair blue 19 male mascu… Tatooi… ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… Tatooi… ## 3 R2-D2 96 32 &lt;NA&gt; white,… red 33 none mascu… Naboo ## 4 Darth Vader 202 136 none white yellow 41.9 male mascu… Tatooi… ## 5 Leia Organa 150 49 brown light brown 19 fema… femin… Aldera… ## 6 Owen Lars 178 120 brown,… light blue 52 male mascu… Tatooi… ## 7 Beru White… 165 75 brown light blue 47 fema… femin… Tatooi… ## 8 R5-D4 97 32 &lt;NA&gt; white,… red NA none mascu… Tatooi… ## 9 Biggs Dark… 183 84 black light brown 24 male mascu… Tatooi… ## 10 Obi-Wan Ke… 182 77 auburn… fair blue-g… 57 male mascu… Stewjon ## # … with 77 more rows, 4 more variables: species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt;, and abbreviated variable names ## # ¹​hair_color, ²​skin_color, ³​eye_color, ⁴​birth_year, ⁵​homeworld If you look closely at the above output, you’ll notice that the starwars dataset is represented as a tibble. A tibble is a more modern version of the dataframe type, and for the most part, anywhere you could use a dataframe, you can use a tibble. You can convert a data frame to tibbles with the as_tible() function. Read more about tibbles here: https://tibble.tidyverse.org/. 8.7 Filter rows with filter() filter() allows you to choose rows in a data frame based on their column values. For example, if we wanted to create a new data frame that only contained droids, we could: starwars %&gt;% filter(species==&quot;Droid&quot;) ## # A tibble: 6 × 14 ## name height mass hair_color skin_color eye_c…¹ birth…² sex gender homew…³ ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… Tatooi… ## 2 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 none mascu… Naboo ## 3 R5-D4 97 32 &lt;NA&gt; white, red red NA none mascu… Tatooi… ## 4 IG-88 200 140 none metal red 15 none mascu… &lt;NA&gt; ## 5 R4-P17 96 NA none silver, r… red, b… NA none femin… &lt;NA&gt; ## 6 BB8 NA NA none none black NA none mascu… &lt;NA&gt; ## # … with 4 more variables: species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;, ## # starships &lt;list&gt;, and abbreviated variable names ¹​eye_color, ²​birth_year, ## # ³​homeworld We can also filter rows based on more complex conditions: starwars %&gt;% filter(species == &quot;Droid&quot; &amp; height &gt; 100) ## # A tibble: 2 × 14 ## name height mass hair_color skin_color eye_co…¹ birth…² sex gender homew…³ ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… Tatooi… ## 2 IG-88 200 140 none metal red 15 none mascu… &lt;NA&gt; ## # … with 4 more variables: species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;, ## # starships &lt;list&gt;, and abbreviated variable names ¹​eye_color, ²​birth_year, ## # ³​homeworld Challenge problem: Use the filter function to filter the data to only characters with the following species attribute: Droid, Wookiee, and Hutt. # Your code here Notice that the original starwars dataset is never modified by any of the filter functions. None of the dplyr functions modify the dataset passed to them with the data argument. Instead, they return a new data frame with the appropriate manipulations. 8.8 Arrange rows with arrange() arrange() reorders rows in the given data frame. It takes a data frame and a set of columns names to reorder by. If you give more than one column name, additional column names are used to break ties in the values of proceeding column names. Challenge problem: Use the arrange function to order the characters by their mass. Which character has the greatest mass? # You code here 8.9 Choose rows using their position with slice() Use slice to choose rows by their position. For example, to choose the character in the second row of the data frame: starwars %&gt;% slice(2) ## # A tibble: 1 × 14 ## name height mass hair_color skin_color eye_co…¹ birth…² sex gender homew…³ ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… Tatooi… ## # … with 4 more variables: species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;, ## # starships &lt;list&gt;, and abbreviated variable names ¹​eye_color, ²​birth_year, ## # ³​homeworld The first, tenth, and twentieth rows of the data frame: starwars %&gt;% slice(c(1,10,20)) ## # A tibble: 3 × 14 ## name height mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex gender homew…⁵ ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Skywal… 172 77 blond fair blue 19 male mascu… Tatooi… ## 2 Obi-Wan Ken… 182 77 auburn… fair blue-g… 57 male mascu… Stewjon ## 3 Palpatine 170 75 grey pale yellow 82 male mascu… Naboo ## # … with 4 more variables: species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;, ## # starships &lt;list&gt;, and abbreviated variable names ¹​hair_color, ²​skin_color, ## # ³​eye_color, ⁴​birth_year, ⁵​homeworld The odd rows of the data frame: starwars %&gt;% slice(seq(1,nrow(starwars), 2)) ## # A tibble: 44 × 14 ## name height mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex gender homew…⁵ ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Skywa… 172 77 blond fair blue 19 male mascu… Tatooi… ## 2 R2-D2 96 32 &lt;NA&gt; white,… red 33 none mascu… Naboo ## 3 Leia Organa 150 49 brown light brown 19 fema… femin… Aldera… ## 4 Beru White… 165 75 brown light blue 47 fema… femin… Tatooi… ## 5 Biggs Dark… 183 84 black light brown 24 male mascu… Tatooi… ## 6 Anakin Sky… 188 84 blond fair blue 41.9 male mascu… Tatooi… ## 7 Chewbacca 228 112 brown unknown blue 200 male mascu… Kashyy… ## 8 Greedo 173 74 &lt;NA&gt; green black 44 male mascu… Rodia ## 9 Wedge Anti… 170 77 brown fair hazel 21 male mascu… Corell… ## 10 Yoda 66 17 white green brown 896 male mascu… &lt;NA&gt; ## # … with 34 more rows, 4 more variables: species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt;, and abbreviated variable names ## # ¹​hair_color, ²​skin_color, ³​eye_color, ⁴​birth_year, ⁵​homeworld Challenge problem: Use the slice and arrange functions to quickly get the character with the largest height. # Your code here There are a few convenient helper versions of the slice function: slice_head slice_tail slice_sample slice_min slice_max Challenge problem: Use the slice_max function to quickly get the character with the largest mass. # Your code here 8.10 Select columns with select() When you’re working with large datasets, sometimes you want to drop all of the columns you’re not using or interested in. For example, if you only wanted the species column: starwars %&gt;% select(species) ## # A tibble: 87 × 1 ## species ## &lt;chr&gt; ## 1 Human ## 2 Droid ## 3 Droid ## 4 Human ## 5 Human ## 6 Human ## 7 Human ## 8 Droid ## 9 Human ## 10 Human ## # … with 77 more rows Or, if you wanted name, species, and homeworld: starwars %&gt;% select(name, species, homeworld) ## # A tibble: 87 × 3 ## name species homeworld ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Skywalker Human Tatooine ## 2 C-3PO Droid Tatooine ## 3 R2-D2 Droid Naboo ## 4 Darth Vader Human Tatooine ## 5 Leia Organa Human Alderaan ## 6 Owen Lars Human Tatooine ## 7 Beru Whitesun lars Human Tatooine ## 8 R5-D4 Droid Tatooine ## 9 Biggs Darklighter Human Tatooine ## 10 Obi-Wan Kenobi Human Stewjon ## # … with 77 more rows What if you wanted all columns with the letter m in the column name? starwars %&gt;% select(contains(&quot;m&quot;)) ## # A tibble: 87 × 4 ## name mass homeworld films ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;list&gt; ## 1 Luke Skywalker 77 Tatooine &lt;chr [5]&gt; ## 2 C-3PO 75 Tatooine &lt;chr [6]&gt; ## 3 R2-D2 32 Naboo &lt;chr [7]&gt; ## 4 Darth Vader 136 Tatooine &lt;chr [4]&gt; ## 5 Leia Organa 49 Alderaan &lt;chr [5]&gt; ## 6 Owen Lars 120 Tatooine &lt;chr [3]&gt; ## 7 Beru Whitesun lars 75 Tatooine &lt;chr [3]&gt; ## 8 R5-D4 32 Tatooine &lt;chr [1]&gt; ## 9 Biggs Darklighter 84 Tatooine &lt;chr [1]&gt; ## 10 Obi-Wan Kenobi 77 Stewjon &lt;chr [6]&gt; ## # … with 77 more rows See the tidyselect documentation for more selection helpers (like contains). Challenge problem: use the select function to select all columns that end in “s” # Your code here 8.11 Rename columns with rename() rename() lets you rename columns. Challenge problem: Use the rename function to rename the column “homeworld” to “party_planet”: # Your code here 8.12 Add new columns with mutate() Often, it is useful to add new columns that are functions of existing columns. Challenge problem: Use the mutate function to add a new column, “heightXmass”. The value in this column for each row should be the product of that row’s height and mass values. # Your code here colnames(starwars) ## [1] &quot;name&quot; &quot;height&quot; &quot;mass&quot; &quot;hair_color&quot; &quot;skin_color&quot; ## [6] &quot;eye_color&quot; &quot;birth_year&quot; &quot;sex&quot; &quot;gender&quot; &quot;homeworld&quot; ## [11] &quot;species&quot; &quot;films&quot; &quot;vehicles&quot; &quot;starships&quot; 8.13 Summarize groups of rows using summarise() summarise() collapses a dataset into a single row. starwars %&gt;% summarise(mass = mean(mass, na.rm=TRUE)) ## # A tibble: 1 × 1 ## mass ## &lt;dbl&gt; ## 1 97.3 summarise() is particularly useful in combination with the group_by function. For example, to get the average mass of characters in each species, starwars %&gt;% group_by(species) %&gt;% summarise(mass=mean(mass, na.rm=TRUE)) ## # A tibble: 38 × 2 ## species mass ## &lt;chr&gt; &lt;dbl&gt; ## 1 Aleena 15 ## 2 Besalisk 102 ## 3 Cerean 82 ## 4 Chagrian NaN ## 5 Clawdite 55 ## 6 Droid 69.8 ## 7 Dug 40 ## 8 Ewok 20 ## 9 Geonosian 80 ## 10 Gungan 74 ## # … with 28 more rows Or, if we wanted to count the number of characters of each species, starwars %&gt;% group_by(species) %&gt;% summarise(count=n()) ## # A tibble: 38 × 2 ## species count ## &lt;chr&gt; &lt;int&gt; ## 1 Aleena 1 ## 2 Besalisk 1 ## 3 Cerean 1 ## 4 Chagrian 1 ## 5 Clawdite 1 ## 6 Droid 6 ## 7 Dug 1 ## 8 Ewok 1 ## 9 Geonosian 1 ## 10 Gungan 3 ## # … with 28 more rows "],["in-class-activity-using-tidyr-to-create-tidy-data.html", "Chapter 9 In-class activity: using tidyr to create tidy data 9.1 Overview 9.2 Setup 9.3 Messy grade data 9.4 Messy temperature data", " Chapter 9 In-class activity: using tidyr to create tidy data 9.1 Overview As part of this activity, you will download three “messy” data sets and use tidyverse functions to transform them into “tidy” data. If you want to read more about tidy data, I suggest the following article for an introduction to tidy data: https://tidyr.tidyverse.org/articles/tidy-data.html. The tidyr package provides functions for making messy data “tidy”. For a complete list of the included functions, see https://tidyr.tidyverse.org/reference/index.html. Understanding tidy data and how to reformat your data into a tidy format is very important, as many of the functions/packages that we will use this semester are written to work with tidy-format data. For example, ggplot (the R graphics package that we will be using) assumes tidy data. Taking the time now to get comfortable with what it means to have tidy data may save you substantial time later on. 9.1.1 Goals: Work through examples of using tidyr (and dplyr) functions to clean up messy (un-tidy) data 9.1.2 Sources https://tidyr.tidyverse.org/articles/tidy-data.html tidyr functions documentation R for Data Science 9.2 Setup You should have already installed the tidyverse collection of packages, which includes the tidyr package. But, if you haven’t, go ahead and run: install.packages(&quot;tidyverse&quot;) We can load all of the tidyverse packages into R using: library(tidyverse) 9.3 Messy grade data 9.3.1 What is tidy data? You can represent the same underlying data many ways. Download the two messy grade data sets from blackboard. Challenge problem: Load messy_grades_1.csv into R: # Your code here Challenge problem: Load messy_grades_2.csv into R: # Your code here Challenge questions: Why are these data sets (messy_grades_1 and messy_grades_2) not tidy? Sketch out a new way to format the grade data that is tidy. Which tidyr function can you use to reformat the messy grade data? (look through the tidyr functions documentation linked above) 9.3.2 Making data tidy Challenge problem: Use the function you identified previously to create reformat the grade data into a tidy format: # Your code here 9.4 Messy temperature data Challenge problem: Load the messy temperatures data into R: # Your code here Challenge questions: Why is this temperature data set messy? Sketch out a new way to format the temperature data so that it is tidy. Which tidyr function can you use to help you reformat the messy temperature data? Challenge problem: Use the function you identified to reformat the temperature data into a tidy format. # Your code here "],["homework-3.html", "Chapter 10 Homework 3 10.1 Overview 10.2 Setup 10.3 Part A. Use R as a calculator 10.4 Part B. Built-in Functions 10.5 Part C. Creating vectors 10.6 Part D. Subsetting vectors 10.7 Part E. Types of data 10.8 Part F. Control flow 10.9 Part G. Tidyverse", " Chapter 10 Homework 3 10.1 Overview This assignment may be completed with your group. Each group will submit one copy of their homework responses to blackboard. Unlike previous in your previous homework assignments, in this assignment, you will use R markdown to complete your homework. You will turn in both the .Rmd file and the knitted .pdf file to blackboard. I have provided a template R markdown file for you to use (on blackboard). 10.1.1 Objectives This goal of this homework is as follows: Give you an opportunity to practice some R programming Make sure you are comfortable creating and knitting an R Markdown document 10.1.2 Grading Uploaded requested files, 5% File is properly/clearly formatted, 5% Proper section headers for each part of your homework. You clearly indicate which question each of your responses are associated with. All questions: 90% All questions are weighted evenly. 10.1.3 Deliverables .Rmd file used to knit your .pdf file .pdf file knitted from your R markdown file I strongly recommend that you read over your knitted .pdf file before submitting your homework to make sure that it is formatted as you expect. 10.2 Setup I strongly encourage you to stay organized for this course. I recommend that you directory on your computer where you can manage all of your work for this class (e.g., “cis331” would make for a good name). Within that directory, I recommend keeping each of your homework assignments and projects separated into their own directories. For example, I might organize things as follows: cis331/ homeworks/ hw01 hw02 hw03 ... Download the R markdown template provided to you (on blackboard) and answer all of the questions below. The template is meant to help you organize/format your responses. You will need to add explanatory text and code chunks as necessary (be sure to update your names!). 10.2.1 Recommended reference material You will need to refer to R documentation / R programming reference material in order to answer all of the questions. Introduction to dplyr Introduction to tidying data with tidyr R for Data Science 10.3 Part A. Use R as a calculator Write one code chunk for each of the calculations below. For example, if the calculation is 2 + 2, your code chunk should look something like this when your R Markdown document is compiled: 2 + 2 ## [1] 4 Each equation should be translated directly into code. Do not simplify any of the calculations (e.g., 2 + 1 should be 2 + 1 in your code, not 3). \\[ 1+2(3+4) \\] \\[ log_2(4^3 + 3^{2+1}) \\] \\[ \\sqrt{(4+3)(2+1)} \\] 10.4 Part B. Built-in Functions A built-in function is one that comes pre-loaded in R (you don’t need to install and load a package to use). To learn how to use a built-in loaded function that you don’t know how to use appropriately, use the help() function. help() takes one parameter, the name of the function that you want information about (e.g., help(abs)). Instead of the help function, you could also use enter ? and then the name of the function in your R console (e.g., ?abs). Familiarize yourself with the built-in functions abs(), round(), sqrt(), tolower(), and toupper(). Use these built-in functions to write code that prints the following items: The absolute value of -15.5. 4.483847 rounded to one decimal place. The function round() takes two arguments, the number to be rounded and the number of decimal places. “species” in all capital letters. “SPECIES” in all lower case letters. 10.5 Part C. Creating vectors Create the following vectors using just seq() and/or rep(). (don’t use c()) Positive integers from 1 to 99 Odd integers between 1 and 99 The numbers 1,1,1,2,2,2,3,3,3 (hint: read the help pages for seq and rep!) 10.6 Part D. Subsetting vectors Use subsetting syntax (square brackets) to write code that completes the following using the vector y. If you’re not sure where to start on these questions, I suggest reading through the following Software Carpentry lesson on subsetting data: https://swcarpentry.github.io/r-novice-gapminder/06-data-subsetting/index.html y &lt;- c(3, 2, 15, -1, 22, 1, 9, 17, 5) Display only the first value of y. Display the last value of y, in a way that would work if y were any length. (hint: ?length) Display only the values in y that are greater than the mean of y. 10.7 Part E. Types of data Using the vector y write code that completes the following tasks. If you’re not sure how to coerce one data type into another, I suggest the following Software Carpentry guide: https://lms.gvsu.edu/ultra/courses/_397858_1/cl/outline y &lt;- c(3, 2, 15, -1, 22, 1, 9, 17, 5) Make a logical (TRUE/FALSE) vector describing which values in y are positive. Make a logical vector describing whether any of the values of y are equal to the mean of y. Coerce the vector you just made (in #2 above) from a logical vector to a character vector. Make a logical vector describing whether any of the values of y are equal to the median of y. Coerce the vector you just made (in #4 above) into a categorial vector (using factor()). Make a matrix with 4 rows and 3 columns that looks like this: ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 ## [4,] 10 11 12 Coerce the matrix you made in the previous question into a dataframe. 10.8 Part F. Control flow Learning to use R (or any data analysis tool) will require you to be comfortable learning by readint documentation / online tutorials. Read through the following Software Carpentry guide on control flow in R: https://swcarpentry.github.io/r-novice-gapminder/07-control-flow/index.html. After reading the guide, you should be familiar with how to use loops and if statements in R. For extra help with looping in R, see Chapter 21 in R for Data Science. Given the vector of 6 WNBA teams and the vector of teams that qualified for the playoffs, write a loop that iterates over each team in teams and prints out the team name and whether or not that team qualified for the playoffs. If a team qualified for the playoff, print the team’s name and “Qualified”. Otherwise, print the team’s name and “Not qualified”. For example, “Atlanta Dream: Qualified” or “Indiana Fever: Not qualified”. For credit, your solution must must a loop and an if-else statement. Hint: the %in% operator may be useful for checking if a team is qualified for the playoffs. teams &lt;- c( &quot;Atlanta Dream&quot;, &quot;Chicago Sky&quot;, &quot;Connecticut Sun&quot;, &quot;Indiana Fever&quot;, &quot;New York Liberty&quot;, &quot;Washington Mystics&quot; ) qualified_playoffs &lt;- c( &quot;Las Vegas Aces&quot;, &quot;Chicago Sky&quot;, &quot;Connecticut Sun&quot;, &quot;Seattle Storm&quot;, &quot;Washington Mystics&quot;, &quot;Dallas Wings&quot;, &quot;New York Liberty&quot;, &quot;Phoenix Mercury&quot; ) 10.9 Part G. Tidyverse Select one of the packages in the tidyverse (see: https://www.tidyverse.org/packages/). Find the function reference for that package (i.e., the webpage that lists the functions and links to the documentation for each function). Pick one of the functions you think looks useful and run the example code in that function’s documentation (your answer to this question should be working example code). "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
